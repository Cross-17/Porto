print(paste("number of point could be considered as outlier:",
length(subset(wine,residual.sugar >= 0.09 + 1.5*IRQ)$residual.sugar)))
plot.hist('chlorides',0.001) +
scale_x_continuous(lim = c(0,0.2)) +
ggtitle('chlorides distribution')
p2 <- plot.hist('free.sulfur.dioxide',0.05) +
ggtitle('Free sulfur dioxide distribution log10') +
scale_x_log10()
p1 <- plot.hist('free.sulfur.dioxide',1) +
ggtitle('Free sulfur dioxide distribution')
grid.arrange(p1, p2, ncol = 2)
summary(wine$free.sulfur.dioxide)
p2 <- plot.hist('total.sulfur.dioxide',0.05) + ggtitle('Total sulfur dioxide distribution log10') + scale_x_log10()
p1 <- plot.hist('total.sulfur.dioxide',1) + ggtitle('Total sulfur dioxide distribution')
grid.arrange(p1, p2, ncol = 2)
summary(wine$total.sulfur.dioxide)
p2 <- plot.hist('total.sulfur.dioxide',0.05) + ggtitle('Total sulfur dioxide distribution log10') + scale_x_log10()
p1 <- ggplot(aes(x = total.sulfur.dioxide), data = wine) + geom_histogram(binwidth = 1) + ggtitle('Total sulfur dioxide distribution')
grid.arrange(p1, p2, ncol = 2)
summary(wine$total.sulfur.dioxide)
p2 <- plot.hist('total.sulfur.dioxide',0.05) + ggtitle('Total sulfur dioxide distribution log10') + scale_x_log10()
p1 <-plot.hist('total.sulfur.dioxide',2) + ggtitle('Total sulfur dioxide distribution')
grid.arrange(p1, p2, ncol = 2)
summary(wine$total.sulfur.dioxide)
plot.hist('density',0.0001) + ggtitle('density distribution')
summary(wine$density)
plot.hist('density',0.01)  + ggtitle('pH distribution')
summary(wine$pH)
plot.hist('pH',0.01)  + ggtitle('pH distribution')
summary(wine$pH)
p2 <- plot.hist('sulphates',0.01) + ggtitle('sulphates distribution log10') + scale_x_log10()
p1 <- plot.hist('sulphates',0.01) + ggtitle('sulphates distribution')
grid.arrange(p1, p2, ncol = 2)
summary(wine$sulphates)
plot.hist('alcohol',0.2) + ggtitle('alcohol distribution')
summary(wine$alcohol)
plot.hist('alcohol',0.1) + ggtitle('alcohol distribution')
summary(wine$alcohol)
plot.hist('alcohol',0.2) + ggtitle('alcohol distribution')
summary(wine$alcohol)
ggplot(aes(x = alcohol, y = quality), data = wine) +
geom_jitter(alpha = 0.5)  +
geom_smooth(method = 'lm') + ggtitle("alcohol vs quality scatter plot with trend line")
ggplot(aes(x = alcohol, y = quality), data = wine) +
geom_jitter(alpha = 0.2ï¼‰  +
ggplot(aes(x = alcohol, y = quality), data = wine) +
geom_jitter(alpha = 0.2)  +
geom_smooth(method = 'lm') + ggtitle("alcohol vs quality scatter plot with trend line")
ggplot(aes(x = alcohol, y = quality), data = wine) +
geom_jitter(alpha = 0.1)  +
geom_smooth(method = 'lm') + ggtitle("alcohol vs quality scatter plot with trend line")
ggplot(aes(x = factor(quality), y = alcohol), data = wine) +
geom_boxplot()  +
xlab("quality") + ggtitle("alcohol vs quality box plot")
# generate a bivariate grid using GGally
ggplot(aes(x = volatile.acidity , y = quality), data = wine) +
geom_jitter(alpha = 0.1)  +
geom_smooth(method = 'lm') +  ggtitle("volatile acidity vs quality scatter plot with trend line")
# generate a bivariate grid using GGally
ggplot(aes(x = volatile.acidity , y = quality), data = wine) +
geom_jitter(alpha = 0.1)  +
geom_smooth(method = 'lm') +
ggtitle("volatile acidity vs quality scatter plot with trend line")
plot.multi <- function(x,y){
ggplot(wine, aes_string(x = x,y = y)) +
geom_jitter(aes(color = factor(quality) ))+
scale_color_brewer(type = 'qual')
}
plot.multi('alcohol','volatile.acidity')
ggtitle("volatile acidity vs alcohol, with quality as color")
plot.multi <- function(x,y){
ggplot(wine, aes_string(x = x,y = y)) +
geom_jitter(aes(color = factor(quality) ), alpha = 0.1)+
scale_color_brewer(type = 'qual')
}
plot.multi('alcohol','volatile.acidity')
ggtitle("volatile acidity vs alcohol, with quality as color")
plot.multi <- function(x,y){
ggplot(wine, aes_string(x = x,y = y)) +
geom_jitter(aes(color = factor(quality) ), alpha = 0.2)+
scale_color_brewer(type = 'qual')
}
plot.multi('alcohol','volatile.acidity')
ggtitle("volatile acidity vs alcohol, with quality as color")
plot.multi <- function(x,y){
ggplot(wine, aes_string(x = x,y = y)) +
geom_jitter(aes(color = factor(quality) ), alpha = 0.5)+
scale_color_brewer(type = 'qual')
}
plot.multi('alcohol','volatile.acidity')
ggtitle("volatile acidity vs alcohol, with quality as color")
plot.multi('alcohol','volatile.acidity')+
ggtitle("volatile acidity vs alcohol, with quality as color")
ggplot(aes(x = alcohol, y = volatile.acidity), data = wine) +
geom_jitter(aes(color = factor(quality) ) , alpha = 0.5) + scale_color_brewer(type = 'qual')+
ggtitle("volatile acidity vs alcohol, with quality as color")
ggplot(aes(x = factor(quality), y = alcohol), data = wine) +
geom_boxplot()  +
xlab("quality") + ggtitle("Box plot of alcohol vs quality")
ggplot(aes(x = quality), data = wine)  +
geom_bar(aes(y = (..count..)/sum(..count..))) +
ggtitle("Plot of quality distribution") +
ylab('percentage distribution')
ggplot(aes(x = alcohol, y = volatile.acidity), data = wine) +
geom_jitter(aes(color = factor(quality) ) , alpha = 0.5) + scale_color_brewer(type = 'seq')+
ggtitle("volatile acidity vs alcohol, with quality as color")
ggplot(aes(x = alcohol, y = volatile.acidity), data = wine) +
geom_jitter(aes(color = factor(quality) )) + scale_color_brewer(type = 'seq')+
ggtitle("volatile acidity vs alcohol, with quality as color")
plot.multi <- function(x,y){
ggplot(wine, aes_string(x = x,y = y)) +
geom_jitter(aes(color = factor(quality) ), alpha = 0.5)+
scale_color_brewer(type = 'seq')
}
plot.multi('alcohol','volatile.acidity')+
ggtitle("volatile acidity vs alcohol, with quality as color")
plot.multi('alcohol','sulphates')+
ggtitle("sulphates vs alcohol, with quality as color")
plot.multi('alcohol','citric.acid')+
ggtitle("citric acid vs alcohol, with quality as color")
ggplot(aes(x = factor(quality), y = volatile.acidity), data = wine) +
geom_boxplot()  +
xlab("quality") + ggtitle("volatile acidity vs quality box plot")
# generate a bivariate grid using GGally
p1 <-ggplot(aes(x = sulphates , y = quality), data = wine) +
geom_jitter()  +
geom_smooth(method = 'lm') +  ggtitle("sulphates vs quality scatter plot \n with trend line")
p2 <- ggplot(aes(x = factor(quality), y = sulphates ), data = wine) +
geom_boxplot()  +
xlab("quality") + ggtitle("sulphates vs quality box plot")
p3 <-ggplot(aes(x = citric.acid , y = quality), data = wine) +
geom_jitter()  +
geom_smooth(method = 'lm')+  ggtitle("citric acid vs quality scatter plot \n with trend line")
p4 <- ggplot(aes(x = factor(quality), y = citric.acid ), data = wine) +
geom_boxplot()  +
xlab("quality")+ ggtitle("citric acid vs quality box plot")
grid.arrange(p1,p2,p3, p4, ncol = 2)
p1<- ggplot(aes(x = alcohol, y = quality), data = wine) +
geom_jitter(alpha = 0.1)  +
geom_smooth(method = 'lm') +
ggtitle("alcohol vs quality scatter plot with trend line")
p2<-ggplot(aes(x = factor(quality), y = alcohol), data = wine) +
geom_boxplot()  +
xlab("quality") + ggtitle("alcohol vs quality box plot")
grid.arrange(p1,p2,ncol = 2)
p1<- ggplot(aes(x = alcohol, y = quality), data = wine) +
geom_jitter(alpha = 0.1)  +
geom_smooth(method = 'lm') +
ggtitle("alcohol vs quality scatter plot with \n trend line")
p2<-ggplot(aes(x = factor(quality), y = alcohol), data = wine) +
geom_boxplot()  +
xlab("quality") + ggtitle("alcohol vs quality box plot")
grid.arrange(p1,p2,ncol = 2)
# generate a bivariate grid using GGally
p1<- ggplot(aes(x = volatile.acidity , y = quality), data = wine) +
geom_jitter(alpha = 0.1)  +
geom_smooth(method = 'lm') +
ggtitle("volatile acidity vs quality scatter plot with trend line")
p2<- ggplot(aes(x = factor(quality), y = volatile.acidity), data = wine) +
geom_boxplot()  +
xlab("quality") + ggtitle("volatile acidity vs quality box plot")
grid.arrange(p1,p2,ncol = 2)
# generate a bivariate grid using GGally
p1<- ggplot(aes(x = volatile.acidity , y = quality), data = wine) +
geom_jitter(alpha = 0.1)  +
geom_smooth(method = 'lm') +
ggtitle("volatile acidity vs quality scatter plot with trend line")
p2<- ggplot(aes(x = factor(quality), y = volatile.acidity), data = wine) +
geom_boxplot()  +
xlab("quality") + ggtitle("volatile acidity vs quality box plot")
grid.arrange(p1,p2,ncol = 2)
ggplot(aes(x = factor(quality), y = alcohol), data = wine) +
geom_boxplot()  +
xlab("quality score") + ggtitle("Box plot of alcohol vs quality")
+ ylab(% by volume)
ggplot(aes(x = factor(quality), y = alcohol), data = wine) +
geom_boxplot()  +
xlab("quality score") + ggtitle("Box plot of alcohol vs quality")
+ ylab(% by volume)
ggplot(aes(x = factor(quality), y = alcohol), data = wine) +
geom_boxplot()  +
xlab("quality score") + ggtitle("Box plot of alcohol vs quality")
+ ylab('% by volume')
ggplot(aes(x = factor(quality), y = alcohol), data = wine) +
geom_boxplot()  +
xlab("quality score") + ggtitle("Box plot of alcohol vs quality")
+ ylab("% by volume")
ggplot(aes(x = factor(quality), y = alcohol), data = wine) +
geom_boxplot()  +
xlab("quality score") + ggtitle("Box plot of alcohol vs quality")+
ylab("% by volume")
ggplot(aes(x = factor(quality), y = alcohol), data = wine) +
geom_boxplot()  +
xlab("quality score") + ggtitle("Box plot of alcohol vs quality")+
ylab("alcohol % by volume")
ggplot(aes(x = alcohol, y = volatile.acidity), data = wine) +
geom_jitter(aes(color = factor(quality) )) + scale_color_brewer(type = 'seq')+
ggtitle("volatile acidity vs alcohol, with quality as color")=
xlab("alcohol % by volume")+
ylab("volatile acidity in g/dm^3")
ggplot(aes(x = alcohol, y = volatile.acidity), data = wine) +
geom_jitter(aes(color = factor(quality) )) + scale_color_brewer(type = 'seq')+
ggtitle("volatile acidity vs alcohol, with quality as color")+
xlab("alcohol % by volume")+
ylab("volatile acidity in g/dm^3")
ggplot(aes(x = quality), data = wine)  +
geom_bar(aes(y = (..count..)/sum(..count..))) +
ggtitle("Plot of quality distribution") +
ylab('percentage distribution')+
xlab("quality score")
p2 <- plot.hist('total.sulfur.dioxide',0.05) +
ggtitle('Total sulfur dioxide distribution log10') +
scale_x_log10()
p1 <-plot.hist('total.sulfur.dioxide',2) +
ggtitle('Total sulfur dioxide distribution')
grid.arrange(p1, p2, ncol = 2)
summary(wine$total.sulfur.dioxide)
# Load all of the packages
library(ggplot2)
library(GGally)
library(gridExtra)
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/',
echo=FALSE, warning=FALSE, message=FALSE)
plot.hist('residual.sugar',0.1) +
scale_x_continuous(lim = c(1,4)) +
ggtitle('Residual sugar distribution')
plot.multi <- function(x,y){
ggplot(wine, aes_string(x = x,y = y)) +
geom_jitter(aes(color = factor(quality) ), alpha = 0.5)+
scale_color_brewer(type = 'seq') + theme_dark()
}
plot.multi('alcohol','volatile.acidity')+
ggtitle("volatile acidity vs alcohol, with quality as color")
plot.multi('alcohol','sulphates')+
ggtitle("sulphates vs alcohol, with quality as color")
plot.multi('alcohol','citric.acid')+
ggtitle("citric acid vs alcohol, with quality as color")
ggplot(aes(x = alcohol, y = volatile.acidity), data = wine) +
geom_jitter(aes(color = factor(quality) )) + scale_color_brewer(type = 'seq')+
ggtitle("volatile acidity vs alcohol, with quality as color")+
xlab("alcohol % by volume")+
ylab("volatile acidity in g/dm^3") + + theme_dark()
ggplot(aes(x = alcohol, y = volatile.acidity), data = wine) +
geom_jitter(aes(color = factor(quality) )) + scale_color_brewer(type = 'seq')+
ggtitle("volatile acidity vs alcohol, with quality as color")+
xlab("alcohol % by volume")+
ylab("volatile acidity in g/dm^3") +  theme_dark()
# generate a bivariate grid using GGally
wine.pair = wine
wine.pair$X <- NULL
ggpairs(wine.pair) + ggtitle("pair plot in red wine dataset")
?dimnames()
install.packages('xgboost')
library(data.table)
library(Matrix)
library(xgboost)
library(caret)
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('grid') # visualisation
library('gridExtra') # visualisation
library('corrplot') # visualisation
library('ggfortify') # visualisation
library('ggraph') # visualisation
library('igraph') # visualisation
library('dplyr') # data manipulation
library('readr') # data input
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
library('tidytext') # text mining
library('SnowballC') # text analysis
library('wordcloud') # test visualisation
knitr::opts_chunk$set(echo = TRUE)
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('ggthemes') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
library('rlang') # data manipulation
# specific visualisation
library('alluvial') # visualisation
install.packages("alluvial")
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('ggthemes') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
library('rlang') # data manipulation
# specific visualisation
library('alluvial') # visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('ggridges') # visualisation
install.packages("ggridges]")
install.packages("ggridges")
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('ggthemes') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
library('rlang') # data manipulation
# specific visualisation
library('alluvial') # visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('ggridges') # visualisation
library('VIM') # NAs
install.packages("VIM")
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('ggthemes') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
library('rlang') # data manipulation
# specific visualisation
library('alluvial') # visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('ggridges') # visualisation
library('VIM') # NAs
library('plotly') # interactive
install.packages("plotly")
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('ggthemes') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
library('rlang') # data manipulation
# specific visualisation
library('alluvial') # visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('ggridges') # visualisation
library('VIM') # NAs
library('plotly') # interactive
install.packages("plotly")
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('ggthemes') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
library('rlang') # data manipulation
# specific visualisation
library('alluvial') # visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('ggridges') # visualisation
library('VIM') # NAs
library('plotly') # interactive
library('ggforce') # visualisation
# modelling
library('xgboost') # modelling
library('caret') # modelling
library('MLmetrics') # gini metric
install.packages("MLmetrics")
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('ggthemes') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
library('rlang') # data manipulation
# specific visualisation
library('alluvial') # visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('ggridges') # visualisation
library('VIM') # NAs
library('plotly') # interactive
library('ggforce') # visualisation
# modelling
library('xgboost') # modelling
library('caret') # modelling
library('MLmetrics') # gini metric
# Define multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# function to extract binomial confidence levels
get_binCI <- function(x,n) as.list(setNames(binom.test(x,n)$conf.int, c("lwr", "upr")))
train <- as.tibble(fread('../input/train.csv', na.strings=c("-1","-1.0")))
setwd("G:/Porto")
train <- as.tibble(fread('../input/train.csv', na.strings=c("-1","-1.0")))
train <- as.tibble(fread('input/train.csv', na.strings=c("-1","-1.0")))
test <- as.tibble(fread('input/test.csv', na.strings=c("-1","-1.0")))
sample_submit <- as.tibble(fread('../input/sample_submission.csv'))
train <- as.tibble(fread('input/train.csv', na.strings=c("-1","-1.0")))
test <- as.tibble(fread('input/test.csv', na.strings=c("-1","-1.0")))
sample_submit <- as.tibble(fread('input/sample_submission.csv'))
summary(train)
glimpse(train)
sum(is.na(train))
sum(is.na(test))
train <- train %>%
mutate_at(vars(ends_with("cat")), funs(factor)) %>%
mutate_at(vars(ends_with("bin")), funs(as.logical)) %>%
mutate(target = as.factor(target))
test <- test %>%
mutate_at(vars(ends_with("cat")), funs(factor)) %>%
mutate_at(vars(ends_with("bin")), funs(as.logical))
